{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","onAddComment","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.560b45fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, status, error} = useHttp(addComment);\n\n  const {onAddedComment} = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value\n   \n\n    sendRequest({\n      commentData: {text: enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className='centered'><LoadingSpinner /></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const {quoteId} = params;\n\n  const {sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = <div className='centered'><LoadingSpinner /></div> \n  };\n\n  if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments}/>\n  }\n\n  if(status ==='completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments= <p className='centered'>No comments were added yet</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddComment={addedCommentHandler}/>}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\n\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport Comments from \"../components/comments/Comments\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\n\nconst QuoteDetail = () => {\n    const match = useRouteMatch();\n    const params = useParams();\n\n    const {quoteId} = params;\n\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    if (status === 'pending') {\n        return <div className='centered'>\n            <LoadingSpinner />\n        </div>\n    };\n\n    if (error) {\n        return <p className='centered'>{error}</p>\n    }\n\n    if (loadedQuote.text) {\n        return <p>No quote found</p>\n    }\n\n    return (\n        <Fragment>\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author}/>\n            <Route path={match.path} exact>\n                <div className='centered'>\n                    <Link className='btn--flat' to={`${match.url}/comments`}>Load Comments</Link>\n                </div>\n            </Route>\n            <Route path={`${match.path}/comments`}>\n                <Comments />\n            </Route>\n        </Fragment>\n    )\n};\n\n\nexport default QuoteDetail;"],"sourceRoot":""}